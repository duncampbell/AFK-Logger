//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UnitTests.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService", CallbackContract=typeof(UnitTests.ServiceReference1.IServiceCallback))]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllEntries", ReplyAction="http://tempuri.org/IService/GetAllEntriesResponse")]
        System.Tuple<System.Collections.Generic.List<AFKHostedService.DataBaseEntry>, int> GetAllEntries(int indexStart, string sortField, string sortDirection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllEntries", ReplyAction="http://tempuri.org/IService/GetAllEntriesResponse")]
        System.Threading.Tasks.Task<System.Tuple<System.Collections.Generic.List<AFKHostedService.DataBaseEntry>, int>> GetAllEntriesAsync(int indexStart, string sortField, string sortDirection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetEntriesOfUser", ReplyAction="http://tempuri.org/IService/GetEntriesOfUserResponse")]
        System.Tuple<System.Collections.Generic.List<AFKHostedService.DataBaseEntry>, int> GetEntriesOfUser(string UserID, int indexStart, string sortField, string sortDirection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetEntriesOfUser", ReplyAction="http://tempuri.org/IService/GetEntriesOfUserResponse")]
        System.Threading.Tasks.Task<System.Tuple<System.Collections.Generic.List<AFKHostedService.DataBaseEntry>, int>> GetEntriesOfUserAsync(string UserID, int indexStart, string sortField, string sortDirection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetEntriesBetween", ReplyAction="http://tempuri.org/IService/GetEntriesBetweenResponse")]
        System.Tuple<System.Collections.Generic.List<AFKHostedService.DataBaseEntry>, int> GetEntriesBetween(System.DateTime start, System.DateTime end, int indexStart, string sortField, string sortDirection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetEntriesBetween", ReplyAction="http://tempuri.org/IService/GetEntriesBetweenResponse")]
        System.Threading.Tasks.Task<System.Tuple<System.Collections.Generic.List<AFKHostedService.DataBaseEntry>, int>> GetEntriesBetweenAsync(System.DateTime start, System.DateTime end, int indexStart, string sortField, string sortDirection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetEntriesBetweenForUser", ReplyAction="http://tempuri.org/IService/GetEntriesBetweenForUserResponse")]
        System.Tuple<System.Collections.Generic.List<AFKHostedService.DataBaseEntry>, int> GetEntriesBetweenForUser(string UserID, System.DateTime start, System.DateTime end, int indexStart, string sortField, string sortDirection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetEntriesBetweenForUser", ReplyAction="http://tempuri.org/IService/GetEntriesBetweenForUserResponse")]
        System.Threading.Tasks.Task<System.Tuple<System.Collections.Generic.List<AFKHostedService.DataBaseEntry>, int>> GetEntriesBetweenForUserAsync(string UserID, System.DateTime start, System.DateTime end, int indexStart, string sortField, string sortDirection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetEntriesForAlice", ReplyAction="http://tempuri.org/IService/GetEntriesForAliceResponse")]
        System.Collections.Generic.List<AFKHostedService.Employee> GetEntriesForAlice();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetEntriesForAlice", ReplyAction="http://tempuri.org/IService/GetEntriesForAliceResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<AFKHostedService.Employee>> GetEntriesForAliceAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/AddServiceEntry")]
        void AddServiceEntry(AFKHostedService.DataBaseEntry entry);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/AddServiceEntry")]
        System.Threading.Tasks.Task AddServiceEntryAsync(AFKHostedService.DataBaseEntry entry);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/AddAppletEntry")]
        void AddAppletEntry(AFKHostedService.DataBaseEntry entry);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/AddAppletEntry")]
        System.Threading.Tasks.Task AddAppletEntryAsync(AFKHostedService.DataBaseEntry entry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddDevice", ReplyAction="http://tempuri.org/IService/AddDeviceResponse")]
        bool AddDevice(AFKHostedService.Device device);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddDevice", ReplyAction="http://tempuri.org/IService/AddDeviceResponse")]
        System.Threading.Tasks.Task<bool> AddDeviceAsync(AFKHostedService.Device device);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddUser", ReplyAction="http://tempuri.org/IService/AddUserResponse")]
        bool AddUser(AFKHostedService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddUser", ReplyAction="http://tempuri.org/IService/AddUserResponse")]
        System.Threading.Tasks.Task<bool> AddUserAsync(AFKHostedService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegisterClient", ReplyAction="http://tempuri.org/IService/RegisterClientResponse")]
        bool RegisterClient(string deviceID, bool service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegisterClient", ReplyAction="http://tempuri.org/IService/RegisterClientResponse")]
        System.Threading.Tasks.Task<bool> RegisterClientAsync(string deviceID, bool service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EntryOutput", ReplyAction="http://tempuri.org/IService/EntryOutputResponse")]
        string EntryOutput(AFKHostedService.DataBaseEntry str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/EntryOutput", ReplyAction="http://tempuri.org/IService/EntryOutputResponse")]
        System.Threading.Tasks.Task<string> EntryOutputAsync(AFKHostedService.DataBaseEntry str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DBTest", ReplyAction="http://tempuri.org/IService/DBTestResponse")]
        string DBTest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DBTest", ReplyAction="http://tempuri.org/IService/DBTestResponse")]
        System.Threading.Tasks.Task<string> DBTestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ClearAllDatabases", ReplyAction="http://tempuri.org/IService/ClearAllDatabasesResponse")]
        void ClearAllDatabases();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ClearAllDatabases", ReplyAction="http://tempuri.org/IService/ClearAllDatabasesResponse")]
        System.Threading.Tasks.Task ClearAllDatabasesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateData", ReplyAction="http://tempuri.org/IService/UpdateDataResponse")]
        void UpdateData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateData", ReplyAction="http://tempuri.org/IService/UpdateDataResponse")]
        System.Threading.Tasks.Task UpdateDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateADUsernames", ReplyAction="http://tempuri.org/IService/UpdateADUsernamesResponse")]
        bool UpdateADUsernames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateADUsernames", ReplyAction="http://tempuri.org/IService/UpdateADUsernamesResponse")]
        System.Threading.Tasks.Task<bool> UpdateADUsernamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateUser", ReplyAction="http://tempuri.org/IService/UpdateUserResponse")]
        void UpdateUser(AFKHostedService.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateUser", ReplyAction="http://tempuri.org/IService/UpdateUserResponse")]
        System.Threading.Tasks.Task UpdateUserAsync(AFKHostedService.Employee emp);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendResult", ReplyAction="http://tempuri.org/IService/SendResultResponse")]
        void SendResult(string test);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FinishDataBaseEntry", ReplyAction="http://tempuri.org/IService/FinishDataBaseEntryResponse")]
        void FinishDataBaseEntry(AFKHostedService.DataBaseEntry entry);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : UnitTests.ServiceReference1.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.DuplexClientBase<UnitTests.ServiceReference1.IService>, UnitTests.ServiceReference1.IService {
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.Tuple<System.Collections.Generic.List<AFKHostedService.DataBaseEntry>, int> GetAllEntries(int indexStart, string sortField, string sortDirection) {
            return base.Channel.GetAllEntries(indexStart, sortField, sortDirection);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<System.Collections.Generic.List<AFKHostedService.DataBaseEntry>, int>> GetAllEntriesAsync(int indexStart, string sortField, string sortDirection) {
            return base.Channel.GetAllEntriesAsync(indexStart, sortField, sortDirection);
        }
        
        public System.Tuple<System.Collections.Generic.List<AFKHostedService.DataBaseEntry>, int> GetEntriesOfUser(string UserID, int indexStart, string sortField, string sortDirection) {
            return base.Channel.GetEntriesOfUser(UserID, indexStart, sortField, sortDirection);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<System.Collections.Generic.List<AFKHostedService.DataBaseEntry>, int>> GetEntriesOfUserAsync(string UserID, int indexStart, string sortField, string sortDirection) {
            return base.Channel.GetEntriesOfUserAsync(UserID, indexStart, sortField, sortDirection);
        }
        
        public System.Tuple<System.Collections.Generic.List<AFKHostedService.DataBaseEntry>, int> GetEntriesBetween(System.DateTime start, System.DateTime end, int indexStart, string sortField, string sortDirection) {
            return base.Channel.GetEntriesBetween(start, end, indexStart, sortField, sortDirection);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<System.Collections.Generic.List<AFKHostedService.DataBaseEntry>, int>> GetEntriesBetweenAsync(System.DateTime start, System.DateTime end, int indexStart, string sortField, string sortDirection) {
            return base.Channel.GetEntriesBetweenAsync(start, end, indexStart, sortField, sortDirection);
        }
        
        public System.Tuple<System.Collections.Generic.List<AFKHostedService.DataBaseEntry>, int> GetEntriesBetweenForUser(string UserID, System.DateTime start, System.DateTime end, int indexStart, string sortField, string sortDirection) {
            return base.Channel.GetEntriesBetweenForUser(UserID, start, end, indexStart, sortField, sortDirection);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<System.Collections.Generic.List<AFKHostedService.DataBaseEntry>, int>> GetEntriesBetweenForUserAsync(string UserID, System.DateTime start, System.DateTime end, int indexStart, string sortField, string sortDirection) {
            return base.Channel.GetEntriesBetweenForUserAsync(UserID, start, end, indexStart, sortField, sortDirection);
        }
        
        public System.Collections.Generic.List<AFKHostedService.Employee> GetEntriesForAlice() {
            return base.Channel.GetEntriesForAlice();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<AFKHostedService.Employee>> GetEntriesForAliceAsync() {
            return base.Channel.GetEntriesForAliceAsync();
        }
        
        public void AddServiceEntry(AFKHostedService.DataBaseEntry entry) {
            base.Channel.AddServiceEntry(entry);
        }
        
        public System.Threading.Tasks.Task AddServiceEntryAsync(AFKHostedService.DataBaseEntry entry) {
            return base.Channel.AddServiceEntryAsync(entry);
        }
        
        public void AddAppletEntry(AFKHostedService.DataBaseEntry entry) {
            base.Channel.AddAppletEntry(entry);
        }
        
        public System.Threading.Tasks.Task AddAppletEntryAsync(AFKHostedService.DataBaseEntry entry) {
            return base.Channel.AddAppletEntryAsync(entry);
        }
        
        public bool AddDevice(AFKHostedService.Device device) {
            return base.Channel.AddDevice(device);
        }
        
        public System.Threading.Tasks.Task<bool> AddDeviceAsync(AFKHostedService.Device device) {
            return base.Channel.AddDeviceAsync(device);
        }
        
        public bool AddUser(AFKHostedService.User user) {
            return base.Channel.AddUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserAsync(AFKHostedService.User user) {
            return base.Channel.AddUserAsync(user);
        }
        
        public bool RegisterClient(string deviceID, bool service) {
            return base.Channel.RegisterClient(deviceID, service);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterClientAsync(string deviceID, bool service) {
            return base.Channel.RegisterClientAsync(deviceID, service);
        }
        
        public string EntryOutput(AFKHostedService.DataBaseEntry str) {
            return base.Channel.EntryOutput(str);
        }
        
        public System.Threading.Tasks.Task<string> EntryOutputAsync(AFKHostedService.DataBaseEntry str) {
            return base.Channel.EntryOutputAsync(str);
        }
        
        public string DBTest() {
            return base.Channel.DBTest();
        }
        
        public System.Threading.Tasks.Task<string> DBTestAsync() {
            return base.Channel.DBTestAsync();
        }
        
        public void ClearAllDatabases() {
            base.Channel.ClearAllDatabases();
        }
        
        public System.Threading.Tasks.Task ClearAllDatabasesAsync() {
            return base.Channel.ClearAllDatabasesAsync();
        }
        
        public void UpdateData() {
            base.Channel.UpdateData();
        }
        
        public System.Threading.Tasks.Task UpdateDataAsync() {
            return base.Channel.UpdateDataAsync();
        }
        
        public bool UpdateADUsernames() {
            return base.Channel.UpdateADUsernames();
        }
        
        public System.Threading.Tasks.Task<bool> UpdateADUsernamesAsync() {
            return base.Channel.UpdateADUsernamesAsync();
        }
        
        public void UpdateUser(AFKHostedService.Employee emp) {
            base.Channel.UpdateUser(emp);
        }
        
        public System.Threading.Tasks.Task UpdateUserAsync(AFKHostedService.Employee emp) {
            return base.Channel.UpdateUserAsync(emp);
        }
    }
}
